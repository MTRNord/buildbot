# -*- python -*-
# ex: set filetype=python:

import re

c = BuildmasterConfig = {}

c['title'] = "Freifunk SLFL"
c['titleURL'] = "http://schleswig-flensburg.freifunk.net"
c['buildbotURL'] = "http://firmware.ffslfl.net/"
c['db_url'] = "sqlite:///state.sqlite"

# SLAVES
from buildbot.plugins import worker
c['workers'] = [
  worker.Worker('bot-main', 'mainpassword'),
]
c['protocols'] = {"pb": {"port": 9989}}

# SCHEDULERS
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
from buildbot.schedulers.timed import Periodic

builder_names = [
    "ar71xx-generic",
    "ar71xx-nand",
    "ar71xx-tiny",
    "mpc85xx-generic",
    "x86_64",
    "x86-generic",
    ]

c['schedulers'] = []
c['schedulers'].append(
    SingleBranchScheduler(
        name="gluon githook",
        change_filter=filter.ChangeFilter(
            branch_re='.*',
            repository='https://github.com/freifunk-gluon/gluon'
            ),
        treeStableTimer=10,
        builderNames=builder_names
    )
)

c['schedulers'].append(
    SingleBranchScheduler(
        name="site githook",
        change_filter=filter.ChangeFilter(
            branch_re='.*',
            repository='https://github.com/ffslfl/site-slfl'
            ),
        treeStableTimer=10,
        builderNames=builder_names
    )
)

c['schedulers'].append(Periodic(
    name="weekly",
    branch="master",
    builderNames=builder_names,
    periodicBuildTimer=7*24*60*60
    )
)

# BUILDERS
from buildbot.process.factory import BuildFactory
from buildbot.config import BuilderConfig
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import DirectoryUpload
from buildbot.steps.master import MasterShellCommand
from buildbot.process.properties import Interpolate, renderer
from buildbot.steps.slave import RemoveDirectory


def is_release_step(step):
    branch = step.build.getProperty("branch")
    return re.match("\d+\.\d+\.\d+$", branch)


cmd_checkoutSource = Git(
    repourl='git://github.com/freifunk-gluon/gluon.git',
    branch="master",   # this can get changed by html.WebStatus.change_hook()
                       # by notification from GitHub of a commit
    workdir="build/gluon",
    mode='full'
    )
cmd_checkoutSite = Git(
    repourl='git://github.com/fffslfl/site-slfl.git',
    branch="lede",   # this can get changed by html.WebStatus.change_hook()
                       # by notification from GitHub of a commit
    workdir="build/gluon/site",
    mode='full'
    )

feed_conf_interpolate = Interpolate(
    "'s/\(packages_berlin\.git\^\)\([a-f0-9]\{40,40\}\)/\1%(prop:revision)s/'"
    ),

def repo_url(props):
    base_url = "http://firmware.ffslfl.net/buildbot"
    branch = props.getProperty("branch")
    target = props.getProperty("buildername")
    is_release_branch = re.match("\d+\.\d+\.\d+$", branch)
    if is_release_branch:
        return "{}/stable/{}/{}/packages".format(
            base_url,
            branch,
            target
            )
    else:
        return "{}/unstable/{}/{}/packages".format(
            base_url,
            target,
            props.getProperty("buildnumber")
            )


@renderer
def cmd_make_command(props):
    command = ['nice', 'make']
    cpus = props.getProperty('cpus_per_build')
    if cpus:
        command.extend(['-j', str(cpus+1)])
    else:
        command.extend(['-j', '2'])
    command.extend(["GLUON_TARGET=" + props.getProperty('buildername')])
    command.extend(["DEFAULT_GLUON_BRANCH=experimental"])
    command.extend(["DEFAULT_GLUON_RELEASE=ffslfl-exp-lede-" + props.getProperty('buildnumber')])
    command.extend(["V=s"])
    return command


cmd_make = ShellCommand(
    command=cmd_make_command,
    workdir="build/gluon",
    haltOnFailure=True
    )

upload_directory = Interpolate(
    "/usr/local/src/www/htdocs/buildbot/unstable/%(prop:buildername)s/%(prop:buildnumber)s/"
    )

cmd_mastermkdir = MasterShellCommand(
    command=[
        "mkdir",
        "-p",
        "--mode=a+rx",
        upload_directory
    ])

slave_src_directory = Interpolate(
    "firmware/firmwares/%(prop:buildername)s/"
)

cmd_uploadPackages = DirectoryUpload(
    slavesrc=slave_src_directory,
    masterdest=upload_directory
    )

cmd_masterchmod = MasterShellCommand(
    command=[
        "chmod",
        "-R",
        "o+rX",
        upload_directory
    ])

cmd_cleanup = RemoveDirectory(
    dir="build/gluon",
    alwaysRun=True
    )

cmd_rsync_release = MasterShellCommand(
    command=[
        "rsync",
        "-av",
        "--delete",
        upload_directory,
        Interpolate("/usr/local/src/www/htdocs/buildbot/stable/%(prop:branch)s/%(prop:buildername)s")
        ],
    doStepIf=is_release_step
    )

cmd_create_release_dir = MasterShellCommand(
    command=[
        "mkdir",
        "-m755",
        "-p",
        Interpolate("/usr/local/src/www/htdocs/buildbot/stable/%(prop:branch)s/")
        ],
    doStepIf=is_release_step
    )

factory = BuildFactory([
    cmd_checkoutSource,
    cmd_checkoutSite,
    cmd_make,
    cmd_mastermkdir,
    cmd_uploadPackages,
    cmd_masterchmod,
    cmd_create_release_dir,
    cmd_rsync_release,
    cmd_cleanup
    ])


def create_builder_config(builder_name):
    return BuilderConfig(
        name=builder_name,
        workernames=['bot-main'],
        factory=factory
    )


c['builders'] = map(create_builder_config, builder_names)

# STATUS TARGETS
from buildbot.plugins import reporters
from buildbot.www import authz

c['services'] = []

irc = reporters.IRC("irc.hackint.org", "freifunkbuildbot",
                 useColors=True,
                 channels=[{"channel": "#slfl"}],
                 notify_events={
                   'exception': 1,
                   'successToFailure': 1,
                   'failureToSuccess': 1,
                 })
c['services'].append(irc)

mn = reporters.MailNotifier(fromaddr="buildbot@firmware.ffslfl.net",
                            mode="change")
c['services'].append(mn)

c['www'] = {
    'port': 8010,
    'authz': authz.Authz(
              gracefulShutdown=False,
              forceBuild=True,
              forceAllBuilds=False,
              pingBuilder=False,
              stopBuild=False,
              stopAllBuilds=False,
              cancelPendingBuild=False,
            ),
    'change_hook_dialects': {'github': True}
}
